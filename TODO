Bugs
----
 * in privmode, the command list built from the completer shows the enable
   command, and it sholdn't

Thought Placeholders
--------------------
 * Finish with show subcommands


 * command work priority:
    - usermode
        IN PROGRESS - enable [password]
        show flash
    - execmode
        write mem|terminal|net|erase
        INPROGRESS - show interface
        show ip address
        show memory
        show configuration
        show runnig-config
        show startup-config
        config term
        ping
        reload
    - configmode
        backend pf|iptables|ipf|ipfw
        login splash [cisco] on|off
        login logo on|off
        login title on|off
        history on|off
        history persist on|off
        nameif
        interface
        ip address
        nat
        global
        route
 * DONE - add LICENSE file
 * DONE - move the parser's makeCommandParseAction out of the parser and into the
   grammar where it belongs
 * DONE - replace as much of the introspection as possible with interface lookups.
    - this is needed in order to support composition of subclasses (e.g.,
      ShortHelpCommand(BaseShortHelpCommand) in usermode finding -- and being
      able to pring short help for -- all IUserCommand and IBaseCommand
      instances, while at the same time privmode's
      ShortHelpCommand(BaseShortHelpCommand) class is able to display all
      IBaseCommand and IPrivCommand subclasses, but not IUserCommand
      subclasses)
    - DONE - Need the following interfaces:
        . IBaseCommand
        . IUserCommand
        . IPrivCommand
        . IConfCommand
    - DONE - class registery instead of inspect? Look at zope.interface/zope.component
 * DONE - move commands that are common to both usermode and privmode out of
   commands.usermode and into commands.common - note that the interface work
   above needs to be done first
    - show, show sucommands, and help are going to be the trickiest
 * DONE - per the TODO in commands.privmode.system:
    - WON'T FIX (not needed; the shell sets the system) do adaptation for system callers
    - WON'T FIX (not needed; the shell sets this up too) do something similar for backends
 * DONE - Fill in the shell completion code to use the new command list builder to get
   global commands.
 * DONE - Add support for subcommands
 * Revamp commands
    - DONE - renmae to "command"
    - DONE - move common commands out of base and into common
    - don't stomp on other modules named "common"
        . DONE - in commands.__init__, from common import *
        . DONE - in other modules, from openpix import command, command.CommandName
        . DONE - make similar changes for openpix.grammar.common:
            from openpix import grammar, grammar.GrammarName
    - DONE - rename _doCommand to doCommand

Startup
-------
 * firewall-specific:
    - read all config files
 * system-specific:
    - collect system information like RAM, interfaces, etc.
 * OpenPIX-specific:
    - parse a ~/.openpixrc file for preferences (configParser/.ini format)
    - load previous command line history
    - load "flash" pickle (~/.openpix/flash)
    - label it all as "reading the flash"
 * display currently configured backend with a note on how to change that
   (enable + config term + backend *) as well as a configuration option for
   disabling that notice during startup
 * provide configuration options for disabling splash, logo, text
 * display a checksum of the source code
 * identify the system on startup and choose the appropriate call module.

Flash Drive
-----------
 * a pickle in ~/.openpix/
 * stores all non-system informtion when "write mem" is called
 * update "show" command to support 

Command Line Completion
-----------------------
 * create a class modeled after rlcompleter.Complete
 * write global_matches to return the list of all possible commands
 * devise a means of getting a list of all possible commads
 * write attr_matches to use spaces (e.g., subcommands) instead of dots (for
   python modules, etc.)
 * set the readline completer to the overridden complete method 
 * the implementation of the help system hinges upon this

Command Line History
--------------------
 * add support for saving history (to pickle?; will require "write mem")

Show Command
-------------
 * DONE - "show ?" should display a list of legal subcommands

Modes
-----
 * DONE - figure out what switching modes actually does... how is this functionality
   reflected in the code?
 * DONE - perhaps the parser should have access to all possible grammar instances and
   switch between them, based on the current mode; this would require that:
    - the parseCommand get passed an additional parameter, "mode"
    - the shell be able to track state (need a Shell class)
    - the shell have an attribute "mode"
    - the shell intercept all mode change commands in order to set the shell
      attribute "mode"

System Commads
--------------

OpenPIX ping and traceroute command will depend on the underly os to esecute
the respective binaries of the same name. In addition, firewall commands will
need to be executed against the the system binary that makes the changes to the
running firewall software (e.g., pfctl for packet filter on OpenBSD). As such,
a proper and efficient means of executing shell commands is needed. There are
reported bugs with the subprocess module, so that needs to be investigated. We
need the solution that is most bug-free and least memory-consumptive.

Firewall Control
----------------

Actual control of the firewall will be made via system calls (see above).
Different firewall/packet filtering software will have different means of
accomplishing this. OpenPIX needs to support the ability to add an arbitrary
number of such potential backends:
 * a configuration option in .openpixrc for setting the desired backend
 * an "enable" + "config term" (privileged mode) command for setting the
   backend
 * logic in the appropriate openpix.commands.*.*._doCommand methods that ensure
   that the configured backend is the one aginst which commands are being
   executed
 * an openpix.system subpackage:
    - DONE - openpix.system.call - code for executing system calls
    - openpix.system.backends.pf, iptables, ipfw, etc. - code for different
      backends

Syslog
------

Gonna need to support this.


Command Pipelining
------------------

Need to add support for the following:
 * piping commands from one to the other
 * grep'ing commands
 * paging commands
